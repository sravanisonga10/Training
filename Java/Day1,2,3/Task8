a)  Implement a method SliceArray that takes an array, a starting index, and an end index, then returns a new array containing the elements from the start to the end index.

import java.util.Arrays;

public class ArraySlicer {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int startIndex = 2;
        int endIndex = 6;

        int[] slicedArray = sliceArray(array, startIndex, endIndex);

        System.out.println("Original array: " + Arrays.toString(array));
        System.out.println("Sliced array: " + Arrays.toString(slicedArray));
    }

    public static int[] sliceArray(int[] array, int startIndex, int endIndex) {
        if (startIndex < 0 || endIndex >= array.length || startIndex > endIndex) {
            throw new IllegalArgumentException("Invalid start or end index");
        }

        int[] slicedArray = new int[endIndex - startIndex + 1];
        int newIndex = 0;

        for (int i = startIndex; i <= endIndex; i++) {
            slicedArray[newIndex++] = array[i];
        }

        return slicedArray;
    }
}


b) Create a recursive function to find the nth element of a Fibonacci sequence and store the first n elements in an array.


import java.util.Arrays;

public class Fibonacci {
    public static void main(String[] args) {
        int n = 10; 
        int[] fibonacciSequence = new int[n];
        generateFibonacciSequence(fibonacciSequence, n);
        
    
        System.out.println("Fibonacci sequence:");
        System.out.println(Arrays.toString(fibonacciSequence));
        
        int nth = 7; 
        int result = fibonacci(nth);
        System.out.println("The " + nth + "th element of the Fibonacci sequence is: " + result);
    }
    public static void generateFibonacciSequence(int[] sequence, int n) {
        for (int i = 0; i < n; i++) {
            sequence[i] = fibonacci(i);
        }
    }
    public static int fibonacci(int n) {
        if (n <= 1) {
            return n;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }
}
