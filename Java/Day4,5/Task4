Write a program that attempts to divide by zero, catches the ArithmeticException, and provides a custom error message.

public class DivideByZeroExample {
    public static void main(String[] args) {
        try {
            int result = divideByZero(10, 0);
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero is not allowed");
        }
    }

    public static int divideByZero(int dividend, int divisor) {
        return dividend / divisor;
    }
}



1) Create a CustomStack class with operations Push, Pop, Peek, and IsEmpty. Demonstrate its LIFO behavior by pushing integers onto the stack, then popping and displaying them until the stack is empty.

import java.util.ArrayList;
import java.util.EmptyStackException;

public class CustomStack {
    private ArrayList<Integer> stack;

    public CustomStack() {
        stack = new ArrayList<>();
    }

    public void push(int value) {
        stack.add(value);
    }

    public int pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        int value = stack.remove(stack.size() - 1);
        return value;
    }

    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.get(stack.size() - 1);
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        CustomStack stack = new CustomStack();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        while (!stack.isEmpty()) {
            System.out.println("Popped: " + stack.pop());
        }
    }
}


2) Develop a CustomQueue class with methods for Enqueue, Dequeue, Peek, and IsEmpty. Show how your queue can handle different data types by enqueuing strings and integers, then dequeuing and displaying them to confirm FIFO order.

import java.util.ArrayList;
import java.util.NoSuchElementException;

public class CustomQueue {
    private ArrayList<Integer> queue;

    public CustomQueue() {
        queue = new ArrayList<>();
    }

    public void enqueue(Integer item) {
        queue.add(item);
    }

    public Integer dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return queue.remove(0);
    }

    public Integer peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return queue.get(0);
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public static void main(String[] args) {
        CustomQueue intQueue = new CustomQueue();
        intQueue.enqueue(1);
        intQueue.enqueue(2);
        intQueue.enqueue(3);
        System.out.println("Dequeued integers:");
        while (!intQueue.isEmpty()) {
            System.out.println(intQueue.dequeue());
        }
    }
}
